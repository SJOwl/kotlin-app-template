/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CandleResolution
import io.swagger.client.models.CandlesResponse
import io.swagger.client.models.Error
import io.swagger.client.models.MarketInstrumentListResponse
import io.swagger.client.models.OrderbookResponse
import io.swagger.client.models.SearchMarketInstrumentResponse

import io.swagger.client.infrastructure.*

class MarketApi(basePath: kotlin.String = "https://api-invest.tinkoff.ru/openapi/") : ApiClient(basePath) {

    /**
     * Получение списка облигаций
     * 
     * @return MarketInstrumentListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun marketBondsGet(): MarketInstrumentListResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/market/bonds"
        )
        val response = request<MarketInstrumentListResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MarketInstrumentListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Получение исторических свечей по FIGI
     * 
     * @param figi FIGI 
     * @param from Начало временного промежутка 
     * @param to Конец временного промежутка 
     * @param interval Интервал свечи 
     * @return CandlesResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun marketCandlesGet(figi: kotlin.String, from: java.time.LocalDateTime, to: java.time.LocalDateTime, interval: CandleResolution): CandlesResponse {
        val localVariableQuery: MultiValueMap = mapOf("figi" to listOf("$figi"), "from" to listOf("$from"), "to" to listOf("$to"), "interval" to listOf("$interval"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/market/candles", query = localVariableQuery
        )
        val response = request<CandlesResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CandlesResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Получение списка валютных пар
     * 
     * @return MarketInstrumentListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun marketCurrenciesGet(): MarketInstrumentListResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/market/currencies"
        )
        val response = request<MarketInstrumentListResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MarketInstrumentListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Получение списка ETF
     * 
     * @return MarketInstrumentListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun marketEtfsGet(): MarketInstrumentListResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/market/etfs"
        )
        val response = request<MarketInstrumentListResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MarketInstrumentListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Получение стакана по FIGI
     * 
     * @param figi FIGI 
     * @param depth Глубина стакана [1..20] 
     * @return OrderbookResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun marketOrderbookGet(figi: kotlin.String, depth: kotlin.Int): OrderbookResponse {
        val localVariableQuery: MultiValueMap = mapOf("figi" to listOf("$figi"), "depth" to listOf("$depth"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/market/orderbook", query = localVariableQuery
        )
        val response = request<OrderbookResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrderbookResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Получение инструмента по FIGI
     * 
     * @param figi FIGI 
     * @return SearchMarketInstrumentResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun marketSearchByFigiGet(figi: kotlin.String): SearchMarketInstrumentResponse {
        val localVariableQuery: MultiValueMap = mapOf("figi" to listOf("$figi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/market/search/by-figi", query = localVariableQuery
        )
        val response = request<SearchMarketInstrumentResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SearchMarketInstrumentResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Получение инструмента по тикеру
     * 
     * @param ticker Тикер инструмента 
     * @return MarketInstrumentListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun marketSearchByTickerGet(ticker: kotlin.String): MarketInstrumentListResponse {
        val localVariableQuery: MultiValueMap = mapOf("ticker" to listOf("$ticker"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/market/search/by-ticker", query = localVariableQuery
        )
        val response = request<MarketInstrumentListResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MarketInstrumentListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Получение списка акций
     * 
     * @return MarketInstrumentListResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun marketStocksGet(): MarketInstrumentListResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/market/stocks"
        )
        val response = request<MarketInstrumentListResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MarketInstrumentListResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
