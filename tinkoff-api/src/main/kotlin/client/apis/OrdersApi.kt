/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Empty
import io.swagger.client.models.Error
import io.swagger.client.models.LimitOrderRequest
import io.swagger.client.models.LimitOrderResponse
import io.swagger.client.models.MarketOrderRequest
import io.swagger.client.models.MarketOrderResponse
import io.swagger.client.models.OrdersResponse

import io.swagger.client.infrastructure.*

class OrdersApi(basePath: kotlin.String = "https://api-invest.tinkoff.ru/openapi/") : ApiClient(basePath) {

    /**
     * Отмена заявки
     * 
     * @param orderId ID заявки 
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return Empty
     */
    @Suppress("UNCHECKED_CAST")
    fun ordersCancelPost(orderId: kotlin.String, brokerAccountId: kotlin.String? = null): Empty {
        val localVariableQuery: MultiValueMap = mapOf("orderId" to listOf("$orderId"), "brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/orders/cancel", query = localVariableQuery
        )
        val response = request<Empty>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Empty
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Получение списка активных заявок
     * 
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return OrdersResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun ordersGet(brokerAccountId: kotlin.String? = null): OrdersResponse {
        val localVariableQuery: MultiValueMap = mapOf("brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/orders", query = localVariableQuery
        )
        val response = request<OrdersResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as OrdersResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Создание лимитной заявки
     * 
     * @param body  
     * @param figi FIGI инструмента 
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return LimitOrderResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun ordersLimitOrderPost(body: LimitOrderRequest, figi: kotlin.String, brokerAccountId: kotlin.String? = null): LimitOrderResponse {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("figi" to listOf("$figi"), "brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/orders/limit-order", query = localVariableQuery
        )
        val response = request<LimitOrderResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LimitOrderResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Создание рыночной заявки
     * 
     * @param body  
     * @param figi FIGI инструмента 
     * @param brokerAccountId Уникальный идентификатор счета (по умолчанию - Тинькофф) (optional)
     * @return MarketOrderResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun ordersMarketOrderPost(body: MarketOrderRequest, figi: kotlin.String, brokerAccountId: kotlin.String? = null): MarketOrderResponse {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("figi" to listOf("$figi"), "brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/orders/market-order", query = localVariableQuery
        )
        val response = request<MarketOrderResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MarketOrderResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
