/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.infrastructure.*
import io.swagger.client.models.PortfolioCurrenciesResponse
import io.swagger.client.models.PortfolioResponse

class PortfolioApi(basePath: kotlin.String = "https://api-invest.tinkoff.ru/openapi/") : ApiClient(basePath) {

    /**
     * Получение валютных активов клиента
     *
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return PortfolioCurrenciesResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun portfolioCurrenciesGet(brokerAccountId: kotlin.String? = null): PortfolioCurrenciesResponse {
        val localVariableQuery: MultiValueMap = mapOf("brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/portfolio/currencies", query = localVariableQuery
        )
        val response = request<PortfolioCurrenciesResponse>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PortfolioCurrenciesResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Получение портфеля клиента
     *
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return PortfolioResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun portfolioGet(brokerAccountId: kotlin.String? = null): PortfolioResponse {
        val localVariableQuery: MultiValueMap = mapOf("brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/portfolio", query = localVariableQuery
        )
        val response = request<PortfolioResponse>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PortfolioResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
