/**
 * OpenAPI
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.infrastructure.*
import io.swagger.client.models.*

class SandboxApi(basePath: kotlin.String = "https://api-invest.tinkoff.ru/openapi/") : ApiClient(basePath) {

    /**
     * Удаление всех позиций
     * Удаление всех позиций клиента
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return Empty
     */
    @Suppress("UNCHECKED_CAST")
    fun sandboxClearPost(brokerAccountId: kotlin.String? = null): Empty {
        val localVariableQuery: MultiValueMap = mapOf("brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sandbox/clear", query = localVariableQuery
        )
        val response = request<Empty>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Empty
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Выставление баланса по валютным позициям
     *
     * @param body Запрос на выставление баланса по валютным позициям
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return Empty
     */
    @Suppress("UNCHECKED_CAST")
    fun sandboxCurrenciesBalancePost(
        body: SandboxSetCurrencyBalanceRequest,
        brokerAccountId: kotlin.String? = null
    ): Empty {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sandbox/currencies/balance", query = localVariableQuery
        )
        val response = request<Empty>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Empty
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Выставление баланса по инструментным позициям
     *
     * @param body Запрос на выставление баланса по инструментным позициям
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return Empty
     */
    @Suppress("UNCHECKED_CAST")
    fun sandboxPositionsBalancePost(
        body: SandboxSetPositionBalanceRequest,
        brokerAccountId: kotlin.String? = null
    ): Empty {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sandbox/positions/balance", query = localVariableQuery
        )
        val response = request<Empty>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Empty
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Регистрация клиента в sandbox
     * Создание счета и валютных позиций для клиента
     * @param body Запрос на создание счета и выставление баланса по валютным позициям (optional)
     * @return SandboxRegisterResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun sandboxRegisterPost(body: SandboxRegisterRequest? = null): SandboxRegisterResponse {
        val localVariableBody: kotlin.Any? = body

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sandbox/register"
        )
        val response = request<SandboxRegisterResponse>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SandboxRegisterResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Удаление счета
     * Удаление счета клиента
     * @param brokerAccountId Номер счета (по умолчанию - Тинькофф) (optional)
     * @return Empty
     */
    @Suppress("UNCHECKED_CAST")
    fun sandboxRemovePost(brokerAccountId: kotlin.String? = null): Empty {
        val localVariableQuery: MultiValueMap = mapOf("brokerAccountId" to listOf("$brokerAccountId"))
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/sandbox/remove", query = localVariableQuery
        )
        val response = request<Empty>(
            localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Empty
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(
                (response as ClientError<*>).body as? String ?: "Client error"
            )
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
